// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_map_mbtiles/test/integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:typed_data' as _i3;

import 'package:mbtiles/mbtiles.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMBTilesMetadata_0 extends _i1.SmartFake
    implements _i2.MBTilesMetadata {
  _FakeMBTilesMetadata_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MBTiles].
///
/// See the documentation for Mockito's code generation for more information.
class MockMBTiles extends _i1.Mock implements _i2.MBTiles {
  @override
  _i2.MBTilesMetadata getMetadata({bool? allowCache = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
          {#allowCache: allowCache},
        ),
        returnValue: _FakeMBTilesMetadata_0(
          this,
          Invocation.method(
            #getMetadata,
            [],
            {#allowCache: allowCache},
          ),
        ),
        returnValueForMissingStub: _FakeMBTilesMetadata_0(
          this,
          Invocation.method(
            #getMetadata,
            [],
            {#allowCache: allowCache},
          ),
        ),
      ) as _i2.MBTilesMetadata);

  @override
  _i3.Uint8List? getTile(
    int? z,
    int? x,
    int? y,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTile,
          [
            z,
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i3.Uint8List?);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
